{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Shared/Relocated Items/Security/Work/Web/NextTest/next-test/components/Layout.tsx\",\n    _this = this;\n\nimport Head from 'next/head';\nvar layoutStyle = {\n  // margin: 20,\n  // padding: 20,\n  // border: '1px solid #DDD'\n  backgroundColor: '#f3f4f6'\n};\n\nvar Layout = function Layout(_ref) {\n  var children = _ref.children,\n      title = _ref.title;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: layoutStyle,\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        charSet: \"utf-8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"viewport\",\n        content: \"initial-scale=1.0, width=device-width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }, _this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 3\n  }, _this);\n};\n\n_c2 = Layout;\n_c = Layout;\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c2;\n\n$RefreshReg$(_c2, \"Layout\");","map":{"version":3,"sources":["/Users/Shared/Relocated Items/Security/Work/Web/NextTest/next-test/components/Layout.tsx"],"names":["layoutStyle","backgroundColor","Layout","children","title"],"mappings":";;;;;AAEA,OAAA,IAAA,MAAA,WAAA;AAKA,IAAMA,WAAW,GAAG;AAClB;AACA;AACA;AACAC,EAAAA,eAAe,EAAE;AAJC,CAApB;;AAOA,IAAMC,MAA6B,GAAG,SAAhCA,MAAgC,CAAA,IAAA,EAAA;AAAA,MAAGC,QAAH,GAAA,IAAA,CAAA,QAAA;AAAA,MAAaC,KAAb,GAAA,IAAA,CAAA,KAAA;AAAA,SAAA,aACpC,OAAA,CAAA,KAAA,EAAA;AACE,IAAA,KAAK,EADP,WAAA;AAAA,IAAA,QAAA,EAAA,CAAA,aAGE,OAAA,CAAA,IAAA,EAAA;AAAA,MAAA,QAAA,EAAA,CAAA,aACE,OAAA,CAAA,OAAA,EAAA;AAAA,QAAA,QAAA,EAAQA;AAAR,OAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,YAAA,EAAA;AAAA,OAAA,EADF,KACE,CADF,EAAA,aAEE,OAAA,CAAA,MAAA,EAAA;AAAM,QAAA,OAAO,EAAC;AAAd,OAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,YAAA,EAAA;AAAA,OAAA,EAFF,KAEE,CAFF,EAAA,aAGE,OAAA,CAAA,MAAA,EAAA;AAAM,QAAA,IAAI,EAAV,UAAA;AAAsB,QAAA,OAAO,EAAC;AAA9B,OAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,YAAA,EAAA;AAAA,OAAA,EAHF,KAGE,CAHF;AAAA,KAAA,EAAA,KAAA,CAAA,EAAA,IAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA,KAAA,EAHF,KAGE,CAHF,EAAA,QAAA;AAAA,GAAA,EAAA,KAAA,CAAA,EAAA,IAAA,EAAA;AAAA,IAAA,QAAA,EAAA,YAAA;AAAA,IAAA,UAAA,EAAA,EAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GAAA,EADoC,KACpC,CADoC;AAAtC,CAAA;;MAAMF,M;KAAAA,M;AAwBN,eAAA,MAAA","sourcesContent":["import * as React from 'react'\nimport Link from 'next/link'\nimport Head from 'next/head'\n\ntype LayoutProps = {\n  title?: string\n}\nconst layoutStyle = {\n  // margin: 20,\n  // padding: 20,\n  // border: '1px solid #DDD'\n  backgroundColor: '#f3f4f6'\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children, title }) => (\n  <div \n    style={layoutStyle}\n  >\n    <Head>\n      <title>{title}</title>\n      <meta charSet=\"utf-8\" />\n      <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n    </Head>\n    {/* <header>\n      <nav>\n        <Link href=\"/\">\n          <a>Home</a>\n        </Link>{' '}\n        |{' '}\n        <Link href=\"/about\">\n          <a>About</a>\n        </Link>{' '}\n        |{' '}\n      </nav>\n    </header> */}\n    {children}\n  </div>\n)\nexport default Layout"]},"metadata":{},"sourceType":"module"}