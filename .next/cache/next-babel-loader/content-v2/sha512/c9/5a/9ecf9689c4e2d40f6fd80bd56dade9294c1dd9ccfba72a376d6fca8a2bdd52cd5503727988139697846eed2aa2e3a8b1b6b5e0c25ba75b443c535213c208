{"ast":null,"code":"import { useState, useCallback } from 'react';\nexport const useHttp = () => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error('Something went wrong');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e);\n      throw e;\n    }\n  }, []);\n  return {\n    loading,\n    request,\n    error\n  };\n};","map":{"version":3,"sources":["/Users/Shared/Relocated Items/Security/Work/Web/NextTest/next-test/hooks/http.hook.ts"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","response","fetch","data","json","ok","Error","e"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBJ,QAAQ,CAAU,KAAV,CAAtC;AACA,QAAM;AAAA,OAACK,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAgB,IAAhB,CAAlC;AAEA,QAAMO,OAAO,GAAGN,WAAW,CAAC,OAAOO,GAAP,EAAoBC,MAAc,GAAG,KAArC,EAA4CC,IAAS,GAAG,IAAxD,EAA8DC,OAAgC,GAAG,EAAjG,KAAwG;AAChIP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,YAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAN,CAA5B;AACA,YAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAG,CAACH,QAAQ,CAACI,EAAb,EAAiB;AACb,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACH;;AAEDb,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEA,aAAOU,IAAP;AACH,KAXD,CAWE,OAAOI,CAAP,EAAU;AACRd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACY,CAAD,CAAR;AACA,YAAMA,CAAN;AACH;AACJ,GAlB0B,EAkBxB,EAlBwB,CAA3B;AAoBA,SAAO;AAAEf,IAAAA,OAAF;AAAWI,IAAAA,OAAX;AAAoBF,IAAAA;AAApB,GAAP;AACH,CAzBM","sourcesContent":["import { useState, useCallback } from 'react';\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState<boolean>(false)\n    const [error, setError] = useState<null | string>(null)\n\n    const request = useCallback(async (url: string, method: string = 'GET', body: any = null, headers: HeadersInit | undefined = {}) => {\n        setLoading(true)\n        try {\n            const response = await fetch(url, {method, body, headers})\n            const data = await response.json()\n\n            if(!response.ok) {\n                throw new Error('Something went wrong')\n            }\n\n            setLoading(false)\n\n            return data\n        } catch (e) {\n            setLoading(false)\n            setError(e)\n            throw e\n        }\n    }, [])  \n\n    return { loading, request, error }\n}"]},"metadata":{},"sourceType":"module"}