{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Shared/Relocated Items/Security/Work/Web/NextTest/next-test/components/Review.tsx\",\n    _this = this;\n\nvar Review = function Review(_ref) {\n  var id = _ref.id,\n      name = _ref.name,\n      reviews = _ref.reviews,\n      stars = _ref.stars,\n      url = _ref.url;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [name, reviews, stars, /*#__PURE__*/_jsxDEV(\"a\", {\n      href: url,\n      children: \"Link\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, _this);\n};\n\n_c2 = Review;\n_c = Review;\nexport default Review;\n\nvar _c;\n\n$RefreshReg$(_c, \"Review\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c2;\n\n$RefreshReg$(_c2, \"Review\");","map":{"version":3,"sources":["/Users/Shared/Relocated Items/Security/Work/Web/NextTest/next-test/components/Review.tsx"],"names":["Review","id","name","reviews","stars","url"],"mappings":";;;;;AAUA,IAAMA,MAA4B,GAAG,SAA/BA,MAA+B,CAAA,IAAA,EAAqC;AAAA,MAAnCC,EAAmC,GAAA,IAAA,CAAnCA,EAAmC;AAAA,MAA/BC,IAA+B,GAAA,IAAA,CAA/BA,IAA+B;AAAA,MAAzBC,OAAyB,GAAA,IAAA,CAAzBA,OAAyB;AAAA,MAAhBC,KAAgB,GAAA,IAAA,CAAhBA,KAAgB;AAAA,MAATC,GAAS,GAAA,IAAA,CAATA,GAAS;AACtE,SAAA,aACI,OAAA,CAAA,KAAA,EAAA;AAAA,IAAA,QAAA,EAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,aAOI,OAAA,CAAA,GAAA,EAAA;AAAG,MAAA,IAAI,EAAP,GAAA;AAAA,MAAA,QAAA,EAAA;AAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA,KAAA,EAPJ,KAOI,CAPJ;AAAA,GAAA,EAAA,KAAA,CAAA,EAAA,IAAA,EAAA;AAAA,IAAA,QAAA,EAAA,YAAA;AAAA,IAAA,UAAA,EAAA,EAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GAAA,EADJ,KACI,CADJ;AADJ,CAAA;;MAAML,M;KAAAA,M;AAcN,eAAA,MAAA","sourcesContent":["import React from 'react'\n\ntype ReviewProps = {\n    id: number,\n    name: string,\n    reviews: number,\n    stars: number,\n    url: string\n}\n\nconst Review:React.FC<ReviewProps> = ({id, name, reviews, stars, url}) => {\n    return (\n        <div>\n            {/* {props.id} */}\n            {/* {id} */}\n            {name}\n            {reviews}\n            {stars}\n            {/* {url} */}\n            <a href={url}>Link</a>\n        </div>\n    )\n}\n\nexport default Review\n"]},"metadata":{},"sourceType":"module"}